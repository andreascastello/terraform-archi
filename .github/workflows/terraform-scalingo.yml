name: Terraform Scalingo Deployment

on:
  push:
    branches:
      - main
    paths:
      - "scalingo/**"
  pull_request:
    branches:
      - main
    paths:
      - "scalingo/**"
  workflow_dispatch:
    inputs:
      action:
        description: "Action Terraform √† ex√©cuter"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.5.0"
  TF_WORKING_DIR: "./scalingo"

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìã
            \`\`\`\n
            ${process.env.PLAN || 'No changes. Infrastructure is up-to-date.'}
            \`\`\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve
        env:
          TF_VAR_scalingo_token: ${{ secrets.SCALINGO_TOKEN }}
          TF_VAR_mongodb_atlas_uri: ${{ secrets.MONGODB_ATLAS_URI }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        env:
          TF_VAR_scalingo_token: ${{ secrets.SCALINGO_TOKEN }}
          TF_VAR_mongodb_atlas_uri: ${{ secrets.MONGODB_ATLAS_URI }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}

      - name: Terraform Output
        id: terraform-output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.action == 'apply'
        run: terraform output -json
        continue-on-error: true

      - name: Comment Deployment URLs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.action == 'apply'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const outputs = JSON.parse('${{ steps.terraform-output.outputs.stdout }}');

            const comment = `## üöÄ D√©ploiement Scalingo R√©ussi !

            ### üìç URLs des Applications
            - **Express API**: ${outputs.express_api_url?.value || 'Non disponible'}
            - **FastAPI**: ${outputs.fastapi_api_url?.value || 'Non disponible'}
            - **React App**: ${outputs.react_app_url?.value || 'Non disponible'}

            ### üìä Informations
            - **R√©gion**: ${outputs.deployment_info?.value?.region || 'Non disponible'}
            - **Timestamp**: ${new Date().toISOString()}

            ### üîó Liens Utiles
            - [Dashboard Scalingo](https://my.scalingo.com/)
            - [Logs Applications](https://my.scalingo.com/apps)

            *D√©ploy√© automatiquement par GitHub Actions* üéØ`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
